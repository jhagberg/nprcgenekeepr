% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/groupAssign.R
\name{groupAssign}
\alias{groupAssign}
\title{Assign breeding groups}
\usage{
groupAssign(candidates, kmat, ped, threshold = 0.015625,
  ignore = list(c("F", "F")), min.age = 1, iter = 1000, numGp = 1,
  updateProgress = NULL, withKin = FALSE)
}
\arguments{
\item{candidates}{character vector of IDs of the animals available for
use in the group.}

\item{kmat}{numeric matrix {row and column names: animal IDs} of
pairwise kinship values. Rows and columns are named with animal IDs.}

\item{ped}{datatable that is the `Pedigree`. It contains pedigree
information including the IDs listed in \code{candidates}.}

\item{threshold}{: float
Minimum kinship level to be considered in group formation. Pairwise
kinship below this level will be ignored.}

\item{ignore}{: list <char>
List of sex combinations to be ignored. If provided, the vectors in the
list specify if pairwise kinship should be ignored between certain sexes.
Default is to ignore all pairwise kinship between females.}

\item{min.age}{Minimum age to consider in group formation. Pairwise kinships involving}

\item{iter}{integer indicating the number of times to perform the random
group formation process. Default value is 1000 iterations.}

\item{numGp}{: int
Number of groups that should be formed from the list of IDs. Default is 1.}

\item{updateProgress}{function or NULL. If this function is defined, it
will be called during each iteration to update a
\code{shiny::Progress} object.}

\item{withKin}{logical varialbe when set to \code{TRUE} the kinship
matrix for the group is returned along with the group and score.
Defaults to not return the kinship matrix. This maintains compatability with
earlier versions.}
}
\value{
A list with fields \code{group} and \code{score}.
  The field \code{group} contains a list of the best group(s) produced
  during the simulation, while the field \code{score} provides the score
  associated with the group(s).
}
\description{
Part of Group Formation
}
\details{
Generating  from a list of candidates.
\code{groupAssign} finds either the largest group of unrelated animals
that can be formed from a set of candidate IDs or if more than 1 group is
desired, it finds the set of groups with the largest average size.

The function implements a maximal independent set (MIS) algorithm to find
groups of unrelated animals. A set of animals may have many different MISs of
varying sizes, and finding the largest would require traversing all possible
combinations of animals. Since this could be very time consuming, this
algorithm produces a random sample of the possible MISs, and selects from
these. The size of the random sample is determined by the specified number
of iterations.
}
